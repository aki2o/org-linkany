(require 'org-linkany)
(require 'el-expectations)

(expectations
  (desc "gen-source not generate from not variable")
  (expect nil
    (makunbound 'testsrc)
    (org-linkany--gen-source 'anything 'testsrc))
  (desc "gen-source not generate from not sequence")
  (expect nil
    (org-linkany--gen-source 'anything 'self-insert-command))
  (desc "gen-source use default")
  (expect '((action . identity)
            (migemo)
            (name . "Generate Test")
            (candidates . hoge)
            (candidate-transformer foo bar)
            (keymap)
            (volatile))
    (let ((testsrc `((name . "Generate Test")
                     (candidates . hoge)
                     (candidate-transformer foo bar)
                     (keymap . nil)
                     (volatile)
                     (type . file)
                     (action-transformer baz))))
      (org-linkany--gen-source 'anything 'testsrc)))
  (desc "gen-source use default 2")
  (expect '((action . identity)
            (migemo)
            (name . "Generate Test")
            (candidates . hoge)
            (candidate-transformer foo bar)
            (keymap)
            (volatile)
            (persistent-action . self-insert-and-exit)
            (persistent-help . "Self Insert And Exit"))
    (let ((testsrc `((name . "Generate Test")
                     (candidates . hoge)
                     (candidate-transformer foo bar)
                     (keymap . nil)
                     (volatile)
                     (action . self-insert-command)
                     (persistent-action . self-insert-and-exit)
                     (persistent-help . "Self Insert And Exit")
                     (type . file)
                     (action-transformer baz))))
      (org-linkany--gen-source 'anything 'testsrc)))
  (desc "gen-source not generate from not function action")
  (expect nil
    (let ((testsrc `((name . "Generate Test")
                     (candidates . hoge)
                     (candidate-transformer foo bar)
                     (keymap . nil)
                     (volatile)
                     (action . self-insert-command)
                     (persistent-action . self-insert-and-exit)
                     (persistent-help . "Self Insert And Exit"))))
      (org-linkany--gen-source 'anything 'testsrc :action 'org-linkany/use-migemo)))
  (desc "gen-source custom")
  (expect '((persistent-help . "It's a new help")
            (persistent-action . backward-char)
            (action . forward-char)
            (migemo)
            (name . "Generate Test")
            (candidates . hoge)
            (candidate-transformer foo bar)
            (keymap)
            (volatile))
    (let ((testsrc `((name . "Generate Test")
                     (candidates . hoge)
                     (candidate-transformer foo bar)
                     (keymap . nil)
                     (volatile)
                     (action . self-insert-command)
                     (persistent-action . self-insert-and-exit)
                     (persistent-help . "Self Insert And Exit"))))
      (org-linkany--gen-source 'anything
                               'testsrc
                               :action 'forward-char
                               :persistent-action 'backward-char
                               :persistent-help "It's a new help")))
  (desc "gen-source replace candidates-in-buffer by anything")
  (expect '((action . identity)
            (candidates . anything-candidates-in-buffer)
            (migemo)
            (name . "Generate Test")
            (candidate-transformer foo bar)
            (keymap)
            (volatile))
    (let ((testsrc `((name . "Generate Test")
                     (candidates-in-buffer)
                     (candidate-transformer foo bar)
                     (keymap . nil)
                     (volatile))))
      (org-linkany--gen-source 'anything 'testsrc)))
  (desc "gen-source replace candidates-in-buffer by anything")
  (expect '((action . identity)
            (candidates . helm-candidates-in-buffer)
            (migemo)
            (name . "Generate Test")
            (candidate-transformer foo bar)
            (keymap)
            (volatile))
    (let ((testsrc `((name . "Generate Test")
                     (candidates-in-buffer)
                     (candidate-transformer foo bar)
                     (keymap . nil)
                     (volatile))))
      (org-linkany--gen-source 'helm 'testsrc)))
  )

